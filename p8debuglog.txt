gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0xad6: file p8final.c, line 63.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p8final.c:63
63  {
(gdb) n
65    n=input_n();
(gdb) s
input_n () at p8final.c:8
8   {
(gdb) n
10    printf("enter number of triangles\n");
(gdb) n
enter number of triangles
11    scanf("%d",&n);
(gdb) n
2
12    return n;
(gdb) n
13  }
(gdb) n
main () at p8final.c:66
66    Triangle t[n],smallest;
(gdb) s
67    input_n_triangles(n,t);
(gdb) s
input_n_triangles (n=2, t=0x7ffc3168e3b0) at p8final.c:23
23    for(int i=0;i<n;i++)
(gdb) n
25      t[i]=input_triangle();
(gdb) n
enter the base and altitude of the triangle
 2 3
23    for(int i=0;i<n;i++)
(gdb) n
25      t[i]=input_triangle();
(gdb) n
enter the base and altitude of the triangle
 4 6
23    for(int i=0;i<n;i++)
(gdb) n
27  }
(gdb) n
main () at p8final.c:68
68    find_areas_n(n,t);
(gdb) s
find_areas_n (n=2, t=0x7ffc3168e3b0) at p8final.c:35
35    for(int i=0;i<n;i++)
(gdb) n
37        find_area(&t[i]); 
(gdb) n
35    for(int i=0;i<n;i++)
(gdb) n
37        find_area(&t[i]); 
(gdb) n
35    for(int i=0;i<n;i++)
(gdb) n
39    }
(gdb) n
main () at p8final.c:69
69    smallest=find_smallest_triangle(n,t);
(gdb) s
find_smallest_triangle (n=2, t=0x7ffc3168e3b0) at p8final.c:42
42    int m=0;
(gdb) n
43    for(int i=0;i<n;i++)
(gdb) n
45        if(t[m].area>t[i].area)
(gdb) n
43    for(int i=0;i<n;i++)
(gdb) n
45        if(t[m].area>t[i].area)
(gdb) n
43    for(int i=0;i<n;i++)
(gdb) n
50    return t[m];
(gdb) n
51  }
(gdb) n
main () at p8final.c:70
70    output(n,t,smallest);
(gdb) s
output (n=2, t=0x7ffc3168e3b0, smallest=...) at p8final.c:54
54    printf("the smallest of the triangle with base and height \n");
(gdb) n
the smallest of the triangle with base and height 
55    for(int i=0;i<n;i++)
(gdb) n
57        printf("%f,%f\n",t[i].base,t[i].altitude);
(gdb) n
2.000000,3.000000
55    for(int i=0;i<n;i++)
(gdb) n
57        printf("%f,%f\n",t[i].base,t[i].altitude);
(gdb) n
4.000000,6.000000
55    for(int i=0;i<n;i++)
(gdb) n
59    printf(" is the triangle with base =%f and altitude=%f\n",smallest.base,smallest.altitude);
(gdb) n
 is the triangle with base =2.000000 and altitude=3.000000
60    printf("and has an an area=%f\n",smallest.area);
(gdb) n
and has an an area=3.000000
61  }
(gdb) n
main () at p8final.c:71
71    return 0;
(gdb) n
72    }(gdb) c
Continuing.
[Inferior 1 (process 2440) exited normally]
(gdb) q